{"version":3,"sources":["components/Header.js","components/Modal.js","components/Dates.js","components/Calender.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","onPreviousM","month","year","onToday","onNextM","Modal","type","placeholder","onChange","inputVal","saveEvent","modalClose","Dates","date","getDay","i","dates","push","String","getMonth","getDate","setDate","console","log","Fragment","map","day","todayD","todayMonth","todayYear","key","handleSelectDate","selectedDate","event","item","Calender","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","target","firstChild","data","inputs","classList","contains","toConsumableArray","parentNode","children","forEach","remove","setState","modal","handlePreviousM","prevState","setFullYear","setMonth","handleNextM","handleToday","input","value","days","Date","components_Header","getDays","components_Modal","components_Dates","React","Component","App","components_Calender","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb00690e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"header\">\r\n    \t<button className=\"header__btn\"\r\n    \t\t\t\t\tonClick={props.onPreviousM}>\r\n    \t\t{\" < \"}\r\n    \t</button>\r\n    \t<p> It is : {+props.month+1}.{props.year}</p>\r\n    \t<button className=\"header__btn\"\r\n    \t\t\t\t\tonClick={props.onToday}>\r\n    \t\tToday\r\n    \t</button>\r\n    \t<button className=\"header__btn\"\r\n    \t\t\t\t\tonClick={props.onNextM}>\r\n    \t\t{\" > \"}\r\n    \t</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <div className=\"modal\">\r\n       <p>Please enter your event</p>\r\n        <label>\r\n        \tName of event\r\n       \t <input type='text' placeholder='event'\r\n       \t \t\t\t\tonChange={props.inputVal}></input>\r\n        </label>\r\n\t    <div className='modal__btns'>\r\n        <button className=\"modal__btn\"\r\n        \t\t\t\tonClick={props.saveEvent}>\r\n        \tSave\r\n        </button>\r\n         <button className=\"modal__btn\"\r\n         \t\t\t\t onClick={props.modalClose}>\r\n        \tCancel\r\n        </button>\r\n\t    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\n\r\nfunction Dates(props) {  \r\n    if (props.date.getDay() == 0) {\r\n      for (let i = 6; i > props.date.getDay(); i--) {\r\n        props.dates.push(\"\")\r\n      }} else {\r\n    for (let i = 1; i < props.date.getDay(); i++) {\r\n        props.dates.push(\"\")\r\n      }\r\n    }\r\n    while (String(props.date.getMonth()) == props.month) {\r\n        props.dates.push(props.date.getDate());\r\n        props.date.setDate(+props.date.getDate() + 1);\r\n    }\r\n    \r\n    if (props.date.getDay() == 0){\r\n      props.dates.push(\"\")\r\n    } else if (props.date.getDay() != 1) {\r\n      for (let i = props.date.getDay(); i < 8; i++) {\r\n        props.dates.push(\"\")\r\n        console.log(props.date.getDay())\r\n      }}\r\n\r\n\r\n    // renderEvents(){\r\n    //   if(props.selectedDate){\r\n\r\n    //   }\r\n    // }\r\n       // {props.selectedDate?(props.event.map(item=><p>{item}</p>)):(\"\")}\r\n    return (<>{props.dates.map((day, i)=>{\r\n        return(\r\n        <div className={(day == props.todayD && \r\n                        props.todayMonth == props.month &&\r\n                        props.todayYear == props.year )?(\"calender__date today\"):(\"calender__date\")}\r\n              key={props.month + day + String(props.date.getDay()) + i}\r\n              onClick={props.handleSelectDate}>\r\n          {day}\r\n          <div className=\"events\">\r\n             {props.selectedDate==day?(props.event.map((item, i) =><p key={item + i}>{item}</p>)):(\"\")}\r\n          </div>\r\n        </div>\r\n    )})}</>)\r\n \r\n}\r\n\r\nexport default Dates;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Modal from './Modal';\r\nimport Dates from './Dates';\r\n\r\nclass Calender extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n    this.dates=[];\r\n\t\tthis.days = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'нд'];\r\n    this.state={\r\n      month: this.props.month,\r\n      year: this.props.year,\r\n      selectedDate: '',\r\n      modal: false\r\n    }\r\n\t\tthis.date = new Date(this.state.year, this.state.month, 1);\r\n    this.inputs=[];\r\n    this.input=\"\";\r\n\t}\r\n\r\n  getDays(){\r\n    return (\r\n      this.days.map((day, i)=>{\r\n        return (\r\n          <div className=\"calender__day\" key={day + i + 1}>\r\n          {day}\r\n          </div>\r\n          )}))\r\n  }\r\n\r\n  handleSelectDate=(event)=>{\r\n    if(this.state.selectedDate!=event.target.firstChild.data){\r\n      this.inputs = [];\r\n    }\r\n    if(event.target.classList.contains(\"calender__date\")){\r\n      [...event.target.parentNode.children].forEach((item)=>{\r\n        item.classList.remove(\"selected\");})\r\n      event.target.className += \" selected\";\r\n      this.setState({\r\n        modal: 'open',\r\n        selectedDate: event.target.firstChild.data\r\n    })\r\n    } else if(event.target.parentNode.classList.contains(\"calender__date\")){\r\n      [...event.target.parentNode.parentNode.children].forEach((item)=>{\r\n        item.classList.remove(\"selected\");})\r\n        this.setState({\r\n          modal: 'open',\r\n          selectedDate: event.target.parentNode.firstChild.data\r\n      })\r\n    }\r\n\r\n    \r\n    console.log(this.state.selectedDate)\r\n  }\r\n\r\n  handlePreviousM =()=>{\r\n    if(this.state.month==0){\r\n      this.setState(prevState => {\r\n      let previousYear = +prevState.year - 1;\r\n      return {month:12,\r\n              year: previousYear }\r\n      }) \r\n    this.date.setFullYear(this.state.year-1); \r\n    }\r\n    this.setState(prevState => {\r\n      let previousMonth = --prevState.month;\r\n      return {month: previousMonth}\r\n    }) \r\n    this.date.setMonth(this.state.month-1);\r\n    this.dates = [];\r\n  }\r\n\r\n  handleNextM =()=>{\r\n    if(this.state.month==11){\r\n      this.setState(prevState => {\r\n      let nextYear = +prevState.year + 1;\r\n      return {month:-1,\r\n              year: nextYear }\r\n      })  \r\n    }\r\n    this.setState(prevState => {\r\n      let nextMonth = ++prevState.month;\r\n      return {month: nextMonth}\r\n    })\r\n    this.dates = [];\r\n  }\r\n\r\n  handleToday=()=>{\r\n    this.setState({\r\n      month: this.props.month,\r\n      year: this.props.year\r\n    })\r\n    this.dates = [];\r\n    this.date.setMonth(this.props.month);\r\n    this.date.setFullYear(this.props.year); \r\n  }\r\n\r\n  modalClose =()=>{\r\n    this.setState({\r\n      modal: false\r\n    })\r\n  }\r\n\r\n  inputVal=(event)=>{\r\n    this.input = event.target.value;\r\n    \r\n  }\r\n\r\n  saveEvent=()=>{\r\n    this.setState({\r\n      modal: false\r\n    })\r\n    this.inputs.push(this.input);\r\n  }\r\n\r\n  render(){\r\n  \t  return (\r\n        <div className=\"calender\">\r\n          <Header \r\n            date={this.props.date}\r\n            month={this.state.month}\r\n            year={this.state.year}\r\n            onPreviousM={this.handlePreviousM}\r\n            onNextM={this.handleNextM}\r\n            onToday={this.handleToday}/>\r\n        \t<div className=\"calender__board\">\r\n      \t\t\t<div className=\"calender__days\">\r\n      \t\t\t\t{this.getDays()}\r\n      \t\t\t</div>\r\n            {this.state.modal &&\r\n             <Modal modalClose={this.modalClose}\r\n                    saveEvent={this.saveEvent}\r\n                    inputVal={this.inputVal}/>}\r\n            <div className=\"calender__dates\">\r\n              \r\n              <Dates date={this.date}\r\n                     todayD={this.props.date}\r\n                     month={this.state.month}\r\n                     dates={this.dates}\r\n                     todayMonth={this.props.month}\r\n                     year={this.state.year}\r\n                     todayYear={this.props.year}\r\n                     selectedDate={this.state.selectedDate}\r\n                     event={this.inputs}\r\n                     handleSelectDate={this.handleSelectDate}\r\n               />\r\n            </div>\r\n        \t</div>\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default Calender;\r\n// {this.getDates()}\r\nconst utils = {\r\n  debounce\r\n};\r\n\r\n\r\nfunction debounce(f, delay) {\r\n  let timer = null;\r\n  return function(...args) {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      f.call(this, ...args);\r\n    }, delay);\r\n  };\r\n}","import React from 'react';\r\nimport Calender from './components/Calender';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const date = new Date;\r\n  return (\r\n    <div className=\"App\">\r\n        <Calender \r\n          date={String(date.getDate())}\r\n          month={String(date.getMonth())}\r\n          year={String(date.getFullYear())} />\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}